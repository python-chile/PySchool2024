# Python en Ciencia

🎯 **Objetivos del capítulo**

- Comprender el uso de Python en la ciencia tradicional.
- Aplicar Python en simulaciones físicas y análisis estadísticos.
- Desarrollar habilidades prácticas para resolver problemas científicos.
- Utilizar `Quarto-Pyodide` para ejecutar y experimentar con el código en el navegador.


# 1. 🔬 Física

## Simulación de Movimiento

En este ejercicio, vamos a simular el movimiento de un objeto bajo la influencia de la gravedad y visualizar la trayectoria usando la biblioteca `matplotlib`. Este ejercicio es excelente para practicar el uso de bibliotecas de visualización y operaciones matemáticas en Python.

### Contexto

La simulación de movimientos es una aplicación común en física y matemáticas. En este ejercicio, simularemos la trayectoria de un proyectil lanzado con una velocidad inicial y un ángulo de lanzamiento específicos. Usaremos las ecuaciones del movimiento para calcular la posición del proyectil en diferentes momentos y visualizaremos la trayectoria usando `matplotlib`.

### Objetivos del Ejercicio

::: {.callout-tip collapse="false" title="Desafío:"}
El objetivo de este ejercicio es escribir una función en Python que simule el movimiento de un proyectil bajo la influencia de la gravedad, visualizando la trayectoria con `matplotlib`.
:::

1. **Definir los parámetros de la simulación**: Establecer valores para la gravedad, el tiempo, la velocidad inicial y el ángulo de lanzamiento.
2. **Calcular la trayectoria del proyectil**: Usar las ecuaciones del movimiento para determinar las posiciones `x` y `y` del proyectil en función del tiempo.
3. **Visualizar la trayectoria**: Crear una gráfica que muestre la trayectoria del proyectil, añadiendo efectos visuales para mejorar la presentación.
4. **Probar la simulación**: Ajustar los parámetros para ver cómo afectan la trayectoria del proyectil.

### Código para la Simulación de Movimiento

```{pyodide-python}
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.patches import Circle, Wedge

# Parámetros de la simulación
g = 9.8  # aceleración debido a la gravedad (m/s^2)
t = np.linspace(0, 5, num=100)  # tiempo (s)
v0 = 20  # velocidad inicial (m/s)
theta = np.radians(45)  # ángulo de lanzamiento (grados)

# Componentes de la velocidad inicial
vx = v0 * np.cos(theta)
vy = v0 * np.sin(theta)

# Trayectoria
x = vx * t
y = vy * t - 0.5 * g * t**2

# Punto más alto
max_height_index = np.argmax(y)
max_height_x = x[max_height_index]
max_height_y = y[max_height_index]

# Crear la figura y los ejes
fig, ax = plt.subplots(figsize=(11, 7))
ax.plot(x, y, label='Trayectoria', color='blue', lw=2)

# Agregar un color degradado
for i in range(len(x)-1):
    ax.plot(x[i:i+2], y[i:i+2], color=plt.cm.viridis(i / len(x)))

# Anotar el punto más alto
ax.plot(max_height_x, max_height_y, 'ro')  # punto más alto en rojo
ax.annotate(f'Punto más alto\n({max_height_x:.2f}, {max_height_y:.2f}) m',
            xy=(max_height_x, max_height_y), xytext=(max_height_x+5, max_height_y+5),
            arrowprops=dict(facecolor='black', shrink=0.05),
            fontsize=12, color='red', fontweight='bold')

# Agregar un fondo personalizado
ax.set_facecolor('#f0f0f0')
fig.patch.set_facecolor('#e0e0e0')

# Añadir el sol y el suelo
sun_center = (max(x) + 10, max(y) + 10)
sun_radius = 3

# Dibujar el círculo central del sol
sun = Circle(sun_center, sun_radius, color='yellow', alpha=0.8, zorder=10)
ax.add_patch(sun)

# Dibujar los rayos del sol
for angle in np.linspace(0, 360, 12, endpoint=False):
    wedge = Wedge(sun_center, sun_radius + 2, angle, angle + 15, color='gold', alpha=0.8, zorder=9)
    ax.add_patch(wedge)

ax.fill_between(x, 0, -10, color='green', alpha=0.5)

# Configurar la gráfica
ax.set_title('Trayectoria de un proyectil', fontsize=16, fontweight='bold')
ax.set_xlabel('Distancia horizontal (m)', fontsize=14)
ax.set_ylabel('Altura (m)', fontsize=14)
ax.set_ylim(bottom=0)
ax.legend()

# Mostrar la gráfica
plt.show()
```

### Explicación del Código

Este código define la simulación de movimiento de un proyectil y realiza lo siguiente:

1. **Parámetros de Entrada**:
    - `g`: Aceleración debido a la gravedad (m/s²).
    - `t`: Tiempo en segundos, generando 100 puntos entre 0 y 5 segundos.
    - `v0`: Velocidad inicial del proyectil (m/s).
    - `theta`: Ángulo de lanzamiento convertido a radianes.

2. **Componentes de la Velocidad Inicial**:
    - `vx`: Componente horizontal de la velocidad inicial.
    - `vy`: Componente vertical de la velocidad inicial.

3. **Trayectoria**:
    - `x`: Posición horizontal en función del tiempo.
    - `y`: Posición vertical en función del tiempo considerando la gravedad.

4. **Punto Más Alto**:
    - Calcula y anota el punto más alto de la trayectoria del proyectil.

5. **Visualización**:
    - Configura la visualización de la trayectoria usando `matplotlib`, añadiendo efectos visuales como un color degradado, un fondo personalizado, y un sol con rayos.

### Ejemplo de Uso

El código de ejemplo muestra cómo usar los parámetros definidos para simular la trayectoria de un proyectil con una velocidad inicial de 20 m/s y un ángulo de lanzamiento de 45 grados.

### Prueba y Modificación

Para hacer el ejemplo más entretenido, los estudiantes pueden cambiar los siguientes parámetros y observar cómo afectan la trayectoria del proyectil:

1. **Velocidad Inicial (`v0`)**:
    - Cambiar `v0` a diferentes valores como 10, 30 o 50 m/s para ver cómo la velocidad inicial afecta la distancia y altura máxima alcanzada.
    ```{pyodide-python}
    v0 = 30  # Cambiar a diferentes valores
    ```

2. **Ángulo de Lanzamiento (`theta`)**:
    - Cambiar `theta` a diferentes ángulos como 30, 60 o 75 grados para ver cómo el ángulo de lanzamiento afecta la trayectoria.
    ```{pyodide-python}
    theta = np.radians(60)  # Cambiar a diferentes valores
    ```

3. **Tiempo (`t`)**:
    - Cambiar el rango de tiempo y la cantidad de puntos en el tiempo para observar trayectorias más largas o más cortas.
    ```{pyodide-python}
    t = np.linspace(0, 10, num=200)  # Cambiar el rango de tiempo
    ```

Estos cambios permiten a los estudiantes experimentar con diferentes escenarios y entender mejor cómo las variables iniciales afectan el movimiento de un proyectil, haciendo el ejercicio más interactivo y entretenido.


## Simulación de Movimiento Armónico Simple

En este ejercicio, vamos a simular el movimiento de un oscilador armónico simple y visualizar la posición del oscilador en función del tiempo usando la biblioteca `matplotlib`. Este ejercicio es excelente para practicar el uso de bibliotecas de visualización y operaciones matemáticas en Python.

### Contexto

El movimiento armónico simple es un tipo de oscilación que se describe con la ecuación diferencial de un resorte ideal sin fricción. La posición del oscilador en función del tiempo se puede describir usando la función coseno. Este tipo de movimiento es común en sistemas físicos como péndulos y resortes.

### Objetivos del Ejercicio

::: {.callout-tip collapse="false" title="Desafío:"}
El objetivo de este ejercicio es escribir una función en Python que simule el movimiento de un oscilador armónico simple y visualice la posición del oscilador en función del tiempo usando `matplotlib`.
:::

1. **Importar bibliotecas**: Usaremos `numpy` para las operaciones matemáticas y `matplotlib` para la visualización.
2. **Definir parámetros del oscilador**: Estableceremos los parámetros como la masa del oscilador, la constante del resorte, la frecuencia angular y la amplitud.
3. **Calcular la posición**: Usaremos la fórmula del movimiento armónico simple para calcular la posición del oscilador en diferentes momentos.
4. **Visualizar la posición**: Crearemos una gráfica de la posición del oscilador en función del tiempo utilizando `matplotlib`.

### Código para la Simulación de Movimiento Armónico Simple

```{pyodide-python}
import numpy as np
import matplotlib.pyplot as plt

# Parámetros del oscilador
m = 5.0  # masa (kg)
k = 10.0  # constante de resorte (N/m)
omega = np.sqrt(k / m)  # frecuencia angular (rad/s)
A = 25  # amplitud (m)
t = np.linspace(0, 10, num=500)  # tiempo (s)

# Posición como función del tiempo
x = A * np.cos(omega * t)

# Crear la figura y los ejes
fig, ax = plt.subplots(figsize=(11, 6))

# Añadir un color degradado a la curva
colors = plt.cm.viridis(np.linspace(0, 1, len(t)))
for i in range(len(t)-1):
    ax.plot(t[i:i+2], x[i:i+2], color=colors[i])

# Anotar puntos de interés
ax.annotate('Amplitud máxima', xy=(0, A), xytext=(1, A + 5),
            arrowprops=dict(facecolor='black', shrink=0.05),
            fontsize=12, color='red', fontweight='bold')

# Configurar el fondo y estilo de la gráfica
ax.set_facecolor('#f0f0f0')
fig.patch.set_facecolor('#e0e0e0')

# Añadir elementos visuales adicionales (como un resorte estilizado)
spring_x = np.linspace(0, t[-1], 1000)
spring_y = A * np.cos(omega * spring_x) / 5
ax.plot(spring_x, spring_y, color='gray', linestyle='--', lw=0.5, alpha=0.7)

# Configurar la gráfica
ax.set_title('Movimiento Armónico Simple', fontsize=16, fontweight='bold')
ax.set_xlabel('Tiempo (s)', fontsize=14)
ax.set_ylabel('Posición (m)', fontsize=14)
ax.grid(True)

# Fijar los límites de los ejes
ax.set_xlim(0, 10)
ax.set_ylim(-100, 100)

# Mostrar la gráfica
plt.show()
```

### Explicación del Código

Este código define la simulación del movimiento de un oscilador armónico simple y realiza lo siguiente:

1. **Parámetros de Entrada**:
    - `m`: Masa del oscilador (kg).
    - `k`: Constante del resorte (N/m).
    - `omega`: Frecuencia angular (rad/s), calculada a partir de `m` y `k`.
    - `A`: Amplitud del movimiento (m).
    - `t`: Tiempo en segundos, generando 500 puntos entre 0 y 10 segundos.

2. **Posición como Función del Tiempo**:
    - `x`: Posición del oscilador en función del tiempo usando la fórmula del movimiento armónico simple \( x = A \cos(\omega t) \).

3. **Visualización**:
    - Configura la visualización de la posición del oscilador usando `matplotlib`, añadiendo efectos visuales como un color degradado y un fondo personalizado.
    - Anota puntos de interés como la amplitud máxima.

### Ejemplo de Uso

El código de ejemplo muestra cómo usar los parámetros definidos para simular la posición de un oscilador con una masa de 5 kg, una constante del resorte de 10 N/m, una amplitud de 25 m y una frecuencia angular calculada.

### Prueba y Modificación

Para hacer el ejemplo más entretenido, los estudiantes pueden cambiar los siguientes parámetros y observar cómo afectan la posición del oscilador:

1. **Masa del Oscilador (`m`)**:
    - Cambiar `m` a diferentes valores como 2.0, 8.0 o 10.0 kg para ver cómo la masa afecta la frecuencia angular y el movimiento.
    ```{pyodide-python}
    m = 2.0  # Cambiar a diferentes valores
    omega = np.sqrt(k / m)
    ```

2. **Constante del Resorte (`k`)**:
    - Cambiar `k` a diferentes valores como 5.0, 20.0 o 50.0 N/m para ver cómo la constante del resorte afecta la frecuencia angular y el movimiento.
    ```{pyodide-python}
    k = 20.0  # Cambiar a diferentes valores
    omega = np.sqrt(k / m)
    ```

3. **Amplitud (`A`)**:
    - Cambiar `A` a diferentes valores como 10, 50 o 75 m para ver cómo la amplitud afecta la posición del oscilador.
    ```{pyodide-python}
    A = 50  # Cambiar a diferentes valores
    ```

4. **Tiempo (`t`)**:
    - Cambiar el rango de tiempo y la cantidad de puntos en el tiempo para observar oscilaciones más largas o más cortas.
    ```{pyodide-python}
    t = np.linspace(0, 20, num=1000)  # Cambiar el rango de tiempo
    ```

Estos cambios permiten a los estudiantes experimentar con diferentes escenarios y entender mejor cómo las variables iniciales afectan el movimiento del oscilador armónico simple, haciendo el ejercicio más interactivo y entretenido.



# 2. 📈 Estadística y Probabilidad

## Lanzamiento de Moneda

En este ejercicio, vamos a simular el lanzamiento de una moneda y calcular la probabilidad de obtener cara o cruz. Este ejercicio es excelente para practicar el uso de arrays y funciones estadísticas en Python con la biblioteca `numpy`.

### Contexto

El lanzamiento de una moneda es un experimento clásico en probabilidad. En cada lanzamiento, hay una probabilidad del 50% de obtener cara y una probabilidad del 50% de obtener cruz. Simulando múltiples lanzamientos, podemos estimar las probabilidades experimentales y compararlas con las probabilidades teóricas.

### Objetivos del Ejercicio

::: {.callout-tip collapse="false" title="Desafío:"}
El objetivo de este ejercicio es escribir un programa en Python que simule el lanzamiento de una moneda, cuente las ocurrencias de cara y cruz, y calcule las probabilidades de cada resultado.
:::

1. **Importar bibliotecas**: Usaremos `numpy` para generar los lanzamientos de la moneda y calcular las frecuencias.
2. **Simular lanzamientos**: Generaremos un número específico de lanzamientos de la moneda utilizando `numpy.random.choice`.
3. **Calcular frecuencias**: Contaremos las ocurrencias de cara y cruz.
4. **Calcular probabilidades**: Calcularemos las probabilidades de obtener cara y cruz basadas en las frecuencias.
5. **Mostrar los resultados**: Imprimiremos las frecuencias y probabilidades calculadas.

### Código para el Lanzamiento de Moneda

```{pyodide-python}
import numpy as np
import matplotlib.pyplot as plt

# Número de lanzamientos
n_lanzamientos = 100

# Simular lanzamientos de una moneda
lanzamientos = np.random.choice(['Cara', 'Cruz'], n_lanzamientos)

# Calcular la frecuencia de cada resultado
caras = np.sum(lanzamientos == 'Cara')
cruces = np.sum(lanzamientos == 'Cruz')

# Calcular las probabilidades
prob_cara = caras / n_lanzamientos
prob_cruz = cruces / n_lanzamientos

print(f"Caras: {caras}, Cruces: {cruces}")
print(f"Probabilidad de Cara: {prob_cara:.2f}")
print(f"Probabilidad de Cruz: {prob_cruz:.2f}")

# Crear un gráfico de barras para la frecuencia de cada resultado
plt.figure(figsize=(11, 5))

plt.subplot(1, 2, 1)
plt.bar(['Caras', 'Cruces'], [caras, cruces], color=['lightblue', 'cyan'], edgecolor='black')
plt.title('Frecuencia de Caras y Cruces')
plt.ylabel('Frecuencia')
plt.ylim(0, n_lanzamientos)
plt.grid()

# Calcular probabilidades acumuladas
prob_cara_acumulada = np.cumsum(lanzamientos == 'Cara') / np.arange(1, n_lanzamientos + 1)
prob_cruz_acumulada = np.cumsum(lanzamientos == 'Cruz') / np.arange(1, n_lanzamientos + 1)

# Crear un gráfico de líneas para las probabilidades acumuladas
plt.subplot(1, 2, 2)
plt.plot(prob_cara_acumulada, label='Probabilidad de Cara', color='lightblue')
plt.plot(prob_cruz_acumulada, label='Probabilidad de Cruz', color='cyan')
plt.title('Probabilidades Acumuladas')
plt.xlabel('Número de Lanzamientos')
plt.ylabel('Probabilidad')
plt.legend()
plt.ylim(0, 1)
plt.grid()

# Ajustar el diseño de los gráficos
plt.subplots_adjust(wspace=0.3)
plt.show()
```

### Explicación del Código

Este código simula el lanzamiento de una moneda y realiza lo siguiente:

1. **Número de Lanzamientos**:
    - `n_lanzamientos`: Define el número de lanzamientos a simular.

2. **Simulación de Lanzamientos**:
    - `lanzamientos`: Utiliza `np.random.choice` para generar una secuencia de 'Cara' y 'Cruz'.

3. **Cálculo de Frecuencias**:
    - `caras`: Cuenta el número de veces que aparece 'Cara'.
    - `cruces`: Cuenta el número de veces que aparece 'Cruz'.

4. **Cálculo de Probabilidades**:
    - `prob_cara`: Calcula la probabilidad de obtener 'Cara'.
    - `prob_cruz`: Calcula la probabilidad de obtener 'Cruz'.

5. **Visualización**:
    - Gráfico de barras para mostrar la frecuencia de cada resultado.
    - Gráfico de líneas para mostrar las probabilidades acumuladas de cada resultado a lo largo de los lanzamientos.

### Ejemplo de Uso

El código de ejemplo muestra cómo simular 100 lanzamientos de una moneda y calcular las probabilidades de obtener cara o cruz. Los resultados se muestran en gráficos para facilitar la visualización.

### Prueba y Modificación

Para hacer el ejemplo más entretenido, los estudiantes pueden cambiar los siguientes parámetros y observar cómo afectan los resultados:

1. **Número de Lanzamientos (`n_lanzamientos`)**:
    - Cambiar `n_lanzamientos` a diferentes valores como 200, 500 o 1000 para ver cómo el número de lanzamientos afecta la precisión de las probabilidades calculadas.
    ```{pyodide-python}
    n_lanzamientos = 500  # Cambiar a diferentes valores
    ```

Estos cambios permiten a los estudiantes experimentar con diferentes escenarios y entender mejor cómo las variables iniciales afectan los resultados de la simulación, haciendo el ejercicio más interactivo y entretenido.


## Lanzamiento de Dados

En este ejercicio, vamos a simular el lanzamiento de dos dados y calcular la frecuencia de cada suma posible. Este ejercicio es excelente para practicar el uso de arrays, funciones estadísticas y diccionarios en Python con la biblioteca `numpy`.

### Contexto

El lanzamiento de dos dados es un experimento clásico en probabilidad. Cada dado tiene seis caras, numeradas del 1 al 6. Cuando se lanzan dos dados, las sumas posibles de los números en las caras superiores van desde 2 hasta 12. Simulando múltiples lanzamientos, podemos calcular la frecuencia de cada suma y analizar la distribución de los resultados.

### Objetivos del Ejercicio

::: {.callout-tip collapse="false" title="Desafío:"}
El objetivo de este ejercicio es escribir un programa en Python que simule el lanzamiento de dos dados, calcule la frecuencia de cada suma posible y muestre los resultados.
:::

1. **Importar bibliotecas**: Usaremos `numpy` para generar los lanzamientos de los dados y calcular las frecuencias.
2. **Simular lanzamientos**: Generaremos un número específico de lanzamientos de dos dados utilizando `numpy.random.randint`.
3. **Calcular sumas**: Calcularemos las sumas de los resultados de los dos dados.
4. **Calcular frecuencias**: Contaremos las ocurrencias de cada suma posible usando un diccionario.
5. **Mostrar los resultados**: Imprimiremos la frecuencia de cada suma calculada y visualizaremos los resultados con gráficos.

### Código para el Lanzamiento de Dados

```{pyodide-python}
import numpy as np
import matplotlib.pyplot as plt

# Número de lanzamientos
n_lanzamientos = 100

# Simular lanzamientos de dos dados
np.random.seed(42)  # para reproducibilidad
dado1 = np.random.randint(1, 7, n_lanzamientos)
dado2 = np.random.randint(1, 7, n_lanzamientos)
sumas = dado1 + dado2

# Calcular la frecuencia de cada suma
frecuencias = {suma: np.sum(sumas == suma) for suma in range(2, 13)}

# Mostrar las frecuencias en la consola
print("Frecuencia de cada suma:")
for suma, frecuencia in frecuencias.items():
    print(f"Suma {suma}: {frecuencia}")

# Crear un gráfico de barras para las frecuencias
fig, ax = plt.subplots(figsize=(11, 6))

sums = list(frecuencias.keys())
counts = list(frecuencias.values())

bars = ax.bar(sums, counts, color=plt.cm.viridis(np.linspace(0, 1, len(sums))))

# Crear un histograma para la distribución de las sumas
fig, ax3 = plt.subplots(figsize=(11, 6))
ax3.hist(sumas, bins=np.arange(2, 14) - 0.5, edgecolor='black', color='lightblue', alpha=0.7)
ax3.set_title('Distribución de las Sumas de Dos Dados', fontsize=16, fontweight='bold')
ax3.set_xlabel('Suma', fontsize=14)
ax3.set_ylabel('Frecuencia', fontsize=14)
ax3.set_xticks(sums)
ax3.set_xticklabels(sums)
ax3.set_xlim(1.5, 12.5)
ax3.grid(True)

# Mostrar los gráficos
plt.show()
```

### Explicación del Código

Este código simula el lanzamiento de dos dados y realiza lo siguiente:

1. **Número de Lanzamientos**:
    - `n_lanzamientos`: Define el número de lanzamientos a simular.

2. **Simulación de Lanzamientos**:
    - `dado1` y `dado2`: Utiliza `np.random.randint` para generar los resultados de los lanzamientos de los dos dados.
    - `sumas`: Calcula las sumas de los resultados de los dos dados.

3. **Cálculo de Frecuencias**:
    - `frecuencias`: Cuenta las ocurrencias de cada suma posible usando un diccionario.

4. **Visualización**:
    - Gráfico de barras para mostrar la frecuencia de cada suma.
    - Gráfico de líneas para mostrar la frecuencia acumulada de las sumas.
    - Histograma para mostrar la distribución de las sumas.

### Ejemplo de Uso

El código de ejemplo muestra cómo simular 100 lanzamientos de dos dados y calcular la frecuencia de cada suma posible. Los resultados se muestran en gráficos para facilitar la visualización.

### Prueba y Modificación

Para hacer el ejemplo más entretenido, los estudiantes pueden cambiar los siguientes parámetros y observar cómo afectan los resultados:

1. **Número de Lanzamientos (`n_lanzamientos`)**:
    - Cambiar `n_lanzamientos` a diferentes valores como 200, 500 o 1000 para ver cómo el número de lanzamientos afecta la precisión de las frecuencias calculadas.
    ```{pyodide-python}
    n_lanzamientos = 500  # Cambiar a diferentes valores
    ```

Estos cambios permiten a los estudiantes experimentar con diferentes escenarios y entender mejor cómo las variables iniciales afectan los resultados de la simulación, haciendo el ejercicio más interactivo y entretenido.