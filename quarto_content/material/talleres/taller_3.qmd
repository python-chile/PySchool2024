# Python en Ciencia de Datos

üéØ **Objetivos del cap√≠tulo**

- Explorar y analizar un conjunto de datos de Pok√©mon utilizando Python.
- Aprender t√©cnicas b√°sicas de exploraci√≥n y visualizaci√≥n de datos.
- Comprender c√≥mo aplicar an√°lisis de datos para obtener informaci√≥n relevante.
- Desarrollar habilidades pr√°cticas para visualizar datos de manera efectiva.

## üìä Exploraci√≥n y Visualizaci√≥n de Datos

Primero, importemos las bibliotecas necesarias y carguemos el conjunto de datos de Pok√©mon. Este ejercicio es excelente para practicar la manipulaci√≥n de datos y la visualizaci√≥n con las bibliotecas `pandas` y `matplotlib`.

### Cargar el Conjunto de Datos

::: {.callout-tip collapse="false" title="Desaf√≠o:"}
El objetivo de este ejercicio es cargar un conjunto de datos de Pok√©mon desde una URL y mostrar las primeras filas para obtener una vista previa de los datos.
:::

1. **Importar bibliotecas**: Usar `pandas` para manipulaci√≥n de datos.
2. **Cargar datos**: Leer el conjunto de datos desde una URL.
3. **Mostrar datos**: Mostrar las primeras filas del conjunto de datos.

```{pyodide-python}
import pandas as pd
pd.set_option('display.max_columns', None)

# Cargar el conjunto de datos de Pok√©mon
url = 'https://gist.githubusercontent.com/armgilles/194bcff35001e7eb53a2a8b441e8b2c6/raw/92200bc0a673d5ce2110aaad4544ed6c4010f687/pokemon.csv'
pokemon_data = pd.read_csv(url)

# Mostrar las primeras filas del conjunto de datos
pokemon_data.head()
```

### Descripci√≥n del Conjunto de Datos

::: {.callout-tip collapse="false" title="Desaf√≠o:"}
El objetivo de este ejercicio es obtener una visi√≥n general de las estad√≠sticas del conjunto de datos para comprender mejor la distribuci√≥n de los valores.
:::

1. **Descripci√≥n estad√≠stica**: Usar `describe` para obtener estad√≠sticas b√°sicas del conjunto de datos.

```{pyodide-python}
# Mostrar la descripci√≥n estad√≠stica del conjunto de datos
pokemon_data.describe()
```

## üìà An√°lisis y Visualizaci√≥n de Datos

### Tipos de Pok√©mon

::: {.callout-tip collapse="false" title="Desaf√≠o:"}
El objetivo de este ejercicio es contar cu√°ntos Pok√©mon de cada tipo hay en el conjunto de datos y visualizar estos datos en un gr√°fico de barras.
:::

1. **Contar Pok√©mon por tipo**: Usar `value_counts` para contar los Pok√©mon por tipo.
2. **Crear gr√°fico de barras**: Usar `matplotlib` para visualizar la cantidad de Pok√©mon por tipo.

```{pyodide-python}
import matplotlib.pyplot as plt

# Contar la cantidad de Pok√©mon por tipo
pokemon_por_tipo = pokemon_data['Type 1'].value_counts()

# Crear un gr√°fico de barras
plt.figure(figsize=(11, 6))
pokemon_por_tipo.plot(kind='bar', color='#66c2a5')
plt.title('Cantidad de Pok√©mon por Tipo', fontsize=14)
plt.xlabel('Tipo', fontsize=12)
plt.ylabel('Cantidad', fontsize=12)
plt.xticks(rotation=45)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()
```

### Promedio de Estad√≠sticas por Tipo

::: {.callout-tip collapse="false" title="Desaf√≠o:"}
El objetivo de este ejercicio es calcular y visualizar el promedio de las estad√≠sticas principales de los Pok√©mon agrupados por tipo en un gr√°fico de barras apiladas.
:::

1. **Calcular promedios**: Usar `groupby` y `mean` para calcular el promedio de estad√≠sticas por tipo.
2. **Gr√°fico de barras apiladas**: Usar `plot` para visualizar los promedios.

```{pyodide-python}
# Calcular el promedio de estad√≠sticas por tipo
promedio_estadisticas = pokemon_data.groupby('Type 1')[['HP', 'Attack', 'Defense', 'Speed']].mean()

# Crear un gr√°fico de barras apiladas
colors = ['#fc8d62', '#66c2a5', '#8da0cb', '#e78ac3']
promedio_estadisticas.plot(kind='bar', stacked=True, figsize=(11, 6), color=colors)
plt.title('Promedio de Estad√≠sticas por Tipo de Pok√©mon', fontsize=14)
plt.xlabel('Tipo', fontsize=12)
plt.ylabel('Promedio de Estad√≠sticas', fontsize=12)
plt.legend(title='Estad√≠sticas', loc='upper left')
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()
```

### Estad√≠sticas de Ataque y Defensa

::: {.callout-tip collapse="false" title="Desaf√≠o:"}
El objetivo de este ejercicio es comparar las estad√≠sticas de ataque y defensa de los Pok√©mon en un gr√°fico de dispersi√≥n.
:::

1. **Gr√°fico de dispersi√≥n**: Usar `scatter` para visualizar la relaci√≥n entre ataque y defensa.

```{pyodide-python}
# Crear un gr√°fico de dispersi√≥n de ataque vs defensa
plt.figure(figsize=(11, 6))
plt.scatter(pokemon_data['Attack'], pokemon_data['Defense'], color='#8da0cb', alpha=0.7, edgecolor='k', linewidth=0.5)
plt.title('Ataque vs Defensa de Pok√©mon', fontsize=14)
plt.xlabel('Ataque', fontsize=12)
plt.ylabel('Defensa', fontsize=12)
plt.grid(True, linestyle='--', alpha=0.7)
plt.show()
```



### Peso y Altura de los Pok√©mon

::: {.callout-tip collapse="false" title="Desaf√≠o:"}
El objetivo de este ejercicio es explorar la relaci√≥n entre el peso y la altura de los Pok√©mon utilizando estad√≠sticas simuladas.
:::

1. **Simular datos**: Crear columnas de peso y altura simuladas.
2. **Gr√°fico de dispersi√≥n**: Usar `scatter` para visualizar la relaci√≥n entre peso y altura.

```{pyodide-python}
import numpy as np

# Agregar columnas de peso y altura simuladas
pokemon_data['Weight'] = np.random.uniform(5, 150, len(pokemon_data))  # Peso en kg
pokemon_data['Height'] = np.random.uniform(0.3, 2.5, len(pokemon_data))  # Altura en m

# Crear un gr√°fico de dispersi√≥n de peso vs altura
plt.figure(figsize=(11, 6))
plt.scatter(pokemon_data['Weight'], pokemon_data['Height'], color='#66c2a5', alpha=0.7, edgecolor='k', linewidth=0.5)
plt.title('Peso vs Altura de Pok√©mon', fontsize=14)
plt.xlabel('Peso (kg)', fontsize=12)
plt.ylabel('Altura (m)', fontsize=12)
plt.grid(True, linestyle='--', alpha=0.7)
plt.show()
```

## üìä Tablas y Gr√°ficos Interactivos

### Tabla de Pok√©mon con Mayor Ataque

::: {.callout-tip collapse="false" title="Desaf√≠o:"}
El objetivo de este ejercicio es mostrar los 10 Pok√©mon con la mayor estad√≠stica de ataque.
:::

1. **Top 10 en ataque**: Usar `nlargest` para obtener los Pok√©mon con mayor ataque.
2. **Mostrar tabla**: Mostrar una tabla con los resultados.

```{pyodide-python}
# Obtener los 10 Pok√©mon con mayor ataque
top_ataque = pokemon_data.nlargest(10, 'Attack')[['Name', 'Type 1', 'Attack', 'Defense', 'HP']]

# Mostrar la tabla
top_ataque
```

### Tabla de Pok√©mon con Mayor Defensa

::: {.callout-tip collapse="false" title="Desaf√≠o:"}
El objetivo de este ejercicio es mostrar los 10 Pok√©mon con la mayor estad√≠stica de defensa.
:::

1. **Top 10 en defensa**: Usar `nlargest` para obtener los Pok√©mon con mayor defensa.
2. **Mostrar tabla**: Mostrar una tabla con los resultados.

```{pyodide-python}
# Obtener los 10 Pok√©mon con mayor defensa
top_defensa = pokemon_data.nlargest(10, 'Defense')[['Name', 'Type 1', 'Defense', 'Attack', 'HP']]

# Mostrar la tabla
top_defensa
```

