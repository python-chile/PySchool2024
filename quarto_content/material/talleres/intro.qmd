# Primeros Pasos

## Programaci√≥n

Podr√≠amos definir la esencia de la [programaci√≥n](https://es.wikipedia.org/wiki/Programaci%C3%B3n) en una frase sencilla:

> "Automatizar tareas para que sean ejecutadas por la computadora."

La programaci√≥n permite delegar actividades repetitivas y tediosas a las m√°quinas, liberando a los humanos para que se concentren en desaf√≠os m√°s estimulantes. Estos desaf√≠os suelen requerir creatividad, pensamiento cr√≠tico y un enfoque subjetivo.

> "Se dice que uno no comprende verdaderamente algo hasta que puede explic√°rselo a otro. En realidad, uno no lo entiende completamente hasta que puede explic√°rselo a una computadora." ‚Äî Donald Knuth

Mediante la programaci√≥n, comunicamos a la computadora instrucciones detalladas de las operaciones que deseamos que realice.
Si la computadora no act√∫a como esper√°bamos, usualmente significa que no hemos especificado nuestras instrucciones con la claridad necesaria.

La programaci√≥n es tanto un arte como una ciencia, una pr√°ctica mediante la cual traducimos ideas complejas en comandos que las m√°quinas puedan seguir eficientemente.

## Python

[Python](https://es.wikipedia.org/wiki/Python) se ha consolidado como uno de los lenguajes de programaci√≥n m√°s populares del mundo, y su crecimiento puede atribuirse a tres factores clave:

1. **Claridad y simplicidad:** Los programas escritos en Python suelen ser f√°ciles de leer y entender, ya que su sintaxis se asemeja mucho al ingl√©s. Esto hace que sea accesible tanto para principiantes como para expertos.

2. **Rico ecosistema de librer√≠as:** Python viene equipado con una extensa biblioteca est√°ndar que cubre una amplia variedad de necesidades, desde operaciones matem√°ticas hasta manejo del sistema operativo, pasando por funciones de tiempo y fecha, entre otras.

3. **Extensibilidad:** Python permite a los usuarios ampliar sus capacidades integrando otros lenguajes de programaci√≥n. Esto es posible gracias a que se pueden escribir m√≥dulos en lenguajes como C o C++, los cuales pueden ser utilizados dentro de programas de Python, potenciando as√≠ su eficiencia y flexibilidad.

Esta combinaci√≥n de facilidad de uso, riqueza funcional y adaptabilidad hace que Python sea una herramienta poderosa para una variedad de aplicaciones en ciencia de datos, desarrollo web, automatizaci√≥n, y m√°s.

## Ejecutando c√≥digo Python

Para trabajar con Python en una computadora, debes seguir estos pasos:

1. **Instalaci√≥n de Python:** Aseg√∫rate de tener alguna versi√≥n de Python instalada en tu equipo.
2. **Creaci√≥n de un programa:** Escribe tu c√≥digo en un archivo, como "mi_programa.py".
3. **Ejecuci√≥n del programa:** Utiliza Python para ejecutar el archivo, mediante el comando `python mi_programa.py` en la terminal.

Con el aumento de la popularidad de Python, surgieron plataformas alternativas para su uso, como los notebooks (Jupyter Notebooks, Google Colab y otros), que ofrecen entornos interactivos y vers√°tiles.

En PySchool, optamos por una tecnolog√≠a innovadora que *emula* la ejecuci√≥n de Python directamente en una p√°gina web. Esta opci√≥n no requiere instalaciones y puede usarse desde cualquier dispositivo con conexi√≥n a internet, aunque es importante reconocer que sigue siendo un ambiente simulado.

El entorno incluye tres botones en la parte superior del contenedor de c√≥digo que permiten ejecutar el c√≥digo, reiniciar el c√≥digo a su estado inicial y copiar el c√≥digo al portapapeles. A continuaci√≥n, se muestra una imagen que ilustra estos botones:

![](../../images/botones.png){fig-align="center" width="100%" alt="Botones de ejecutar, reiniciar y copiar en un entorno de c√≥digo Python."}

## Ejemplo: üëã Hola Mundo

En el mundo de la programaci√≥n, es una tradici√≥n comenzar aprendiendo a hacer que la computadora muestre el mensaje "Hola, Mundo" (o "Hello World").

```{pyodide-python}
print("Hola, Mundo")
```

::: {.callout-tip collapse="false" title="Desaf√≠o:"}
Intenta modificar el c√≥digo anterior para que, en lugar de "Hola, Mundo", el mensaje incluya tu nombre. ¬øC√≥mo cambiar√≠as el saludo?
:::

Para hacer nuestro c√≥digo m√°s flexible y reutilizable, podemos introducir **variables**. Piensa en una variable como una caja con nombre donde puedes almacenar cosas como n√∫meros, texto o cualquier tipo de dato. Utilizas un nombre para referirte a esta caja, permiti√©ndote acceder a su contenido m√°s adelante en tu c√≥digo. Adem√°s, puedes cambiar su contenido en cualquier momento simplemente almacenando algo nuevo en ella.

```{pyodide-python}
saludo = "Hola "
nombre = "Chile"
print(saludo + nombre)
```

::: {.callout-tip collapse="false" title="Desaf√≠o:"}
¬øQu√© hace el signo `+` en el ejemplo anterior? ¬øQu√© representan los s√≠mbolos `"`?
:::

La programaci√≥n eficiente busca minimizar el trabajo repetitivo. Si una l√≠nea de c√≥digo se utiliza varias veces, es pr√°ctico "empaquetarla" en una funci√≥n. Esto hace el c√≥digo m√°s compacto y reduce la necesidad de m√∫ltiples modificaciones.

Observa c√≥mo se puede simplificar el c√≥digo utilizando una funci√≥n:

```{pyodide-python}
# Comentario: esta es la funci√≥n imprimir_saludo
def imprimir_saludo(saludo, nombre):
    print(saludo + " " + nombre)

imprimir_saludo("Hola", "DUOC")
imprimir_saludo("Que tal", "Valpara√≠so")
imprimir_saludo("Saludos", "Chile")
```

En este ejemplo, hemos explorado la funci√≥n `print`, cadenas de caracteres (strings), variables y funciones en Python. Adem√°s, Python ofrece [varias funciones adicionales para manipular strings](https://python-docs-es.readthedocs.io/es/3.12/library/stdtypes.html#str). ¬øQu√© hacen las siguientes funciones?

```{pyodide-python}
mi_string = "¬øHoLa Ke HaCe?"
#print(mi_string)
#print(mi_string.upper())
#print(mi_string.lower())
#print(mi_string.title())
#print(mi_string.capitalize())
#print(mi_string.swapcase())
#print(mi_string.split())
```

Recuerda eliminar el car√°cter `#` para que la l√≠nea se ejecute y deje de ser un comentario.